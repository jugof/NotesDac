<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0028)http://m108/exam/result.aspx -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<title>Result:- SunBeam Infotech Pvt LTD, Pune</title>
		<meta content="Microsoft Visual Studio .NET 7.1" name="GENERATOR">
		<meta content="C#" name="CODE_LANGUAGE">
		<meta content="JavaScript" name="vs_defaultClientScript">
		<meta content="http://schemas.microsoft.com/intellisense/ie5" name="vs_targetSchema">
		<script language="JavaScript"> 
			var popup="Copyright 2005, SunBeam Infotech PVT. LTD.";
			function noway(go) 
			{
				if(document.all) 
				{
					if (event.button == 2) 
					{			
						alert(popup);
						return false;
					}
				}
				if (document.layers)
				{
					if (go.which == 3)
					{	
						alert(popup);
						return false;
					}
				} 
			}
			if(document.layers) 
			{ 
				document.captureEvents(Event.MOUSEDOWN);
			}
			document.onmousedown=noway;
			
			var debug = true;
			function right(e)
			{
				if (navigator.appName == 'Netscape' && (e.which == 3 || e.which== 2)) return false;
				else if (navigator.appName == 'Microsoft Internet Explorer' && (event.button == 2 || event.button == 3))
				{
					alert('Copyright 2005, SunBeam Infotech PVT. LTD.');
					return false;
				} 
				return true;
			} 
			document.onmousedown=right; 
			if (document.layers)
			window.captureEvents(Event.MOUSEDOWN);
			window.onmousedown=right;
			
			document.onkeydown = function ()
			{
				alert(popup);
				return false;
			}
			
			function blockMenu()
			{
				return false;
			}
			
		/*onselectstart="return false" onkeypress="return false" onkeydown="return false"
		ondragstart="return false" bottomMargin="0" leftMargin="0" topMargin="0" onload='setInterval("window.clipboardData.clearData()",20);document.attachEvent("oncontextmenu",blockMenu)'
		*/
		/*onselectstart="return false" onkeypress="return false"
		onkeydown="return false" ondragstart="return false" bottomMargin="0" leftMargin="0"
		topMargin="0" onload='setInterval("window.clipboardData.clearData()",20);document.attachEvent("oncontextmenu",blockMenu)'
		*/
		</script>
</head>
	<body rightmargin="0" ms_positioning="GridLayout" onselectstart="return false" onkeypress="return false" onkeydown="return false" ondragstart="return false" bottommargin="0" leftmargin="0" topmargin="0" onload="setInterval(&quot;window.clipboardData.clearData()&quot;,20);document.attachEvent(&quot;oncontextmenu&quot;,blockMenu)">
		<form name="Form1" method="post" action="./2_files/2.htm" id="Form1">
<input type="hidden" name="__VIEWSTATE" value="dDwtMjIwNjg5MjEzO3Q8O2w8aTwxPjs+O2w8dDw7bDxpPDE+O2k8Mz47PjtsPHQ8cDxwPGw8V2lkdGg7XyFTQjs+O2w8MTw1MDBweD47aTwyNTY+Oz4+Oz47Oz47dDxwPHA8bDxUZXh0Oz47bDxIaSBkYWMxMCwgWW91IGhhdmUgc2NvcmVkIDogMDs+Pjs+Ozs+Oz4+Oz4+Oz7MM23fmjWcKDOtvp7fpsGKFMrz5A==">

			<table id="tblResult" cellspacing="0" cellpadding="0" border="0" height="26" width="500" style="Z-INDEX: 100; LEFT: 138px; POSITION: absolute; TOP: 128px">
	<tbody><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;13909 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q1. In C++, a function contained within a class is called _____________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;a member function</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;an operator</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;a class function</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;a method</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 1</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;13922 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q2. Anonymous union means</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;a union having no member.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;a union having no tag name</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;a union having only one object</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;none of the above</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;13939 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q3. When we a declare a data member as a static</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;only one copy of the variable will exist</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;all objects of the class will share this data member</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;it gets initialized to zero</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;all of the above</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;13947 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q4. If a class D is derived from class A and class B is derived from class D, then it is called as</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;multitple</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;hierarchical</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;muli-level</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;single</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;13982 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q5. What is true regarding new and delete operators?</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;When new and  delete operators are overloaded on the objects, the constructors and destructors respectively are automatically called.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;friend functions can’t overload new and delete operators.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;new and delete operators use stack for dynamic memory allocation and deallocation.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;All of the above.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;13987 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q6. Default arguments can be used to</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;pass parameters to another function.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;increase execution speed</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;reduce memory requirement</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;none of the above</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;13992 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q7. Variables are to data types as</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;members are to classes</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;data items are to classes</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;objects are to classes</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;data is to a variable</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14028 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q8. In inheritance ___________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;it doesn’t work in reverse</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;the base class and its objects have no knowledge about any classes derived from the base class</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;A and B</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;none of the above</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14043 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q9. The idea behind virtual functions is to _______ the derived class object’s address into a pointer to a base class object.</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;downcast</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;upcast</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;modify</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;none of the above.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14044 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q10. In function overloading with default arguments, if one argument is missing when the function is called, it is assumed to be ____________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;the first argument</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;the last argument</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;absent</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;having 0 value</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14045 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q11. In function overloading with default arguments, if one argument is missing when the function is called, it is assumed to be ____________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;the first argument</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;the last argument</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;absent</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;having 0 value</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14085 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q12. What is true about a reference?</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;We can have a reference to a pointer.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;We can have a reference to a reference.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;We can have a pointer to a reference.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;We can have an array of references.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 1</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14157 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q13. What is true in case of operator overloading?</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;Any ASCII character (other than alphabets and digits) can be overloaded</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;Overloaded operator must have at least one user defined operand</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;Precedence of the operator can be changed by overloading it</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Syntax of the operator can be changed when overloaded</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14219 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q14. A dangling pointer is one</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;which arises when you use the address of an object after its lifetime is over</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;which may occur in situations like returning addresses of the automatic variables from a function or using the address of the memory block after it is freed</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;Option 1 and Option 2</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;None of the above</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14234 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q15. The inline specifier ________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;does not change the behavior of a function</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;tells the compiler to make a use of a stack for calling a function</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;A and B</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;A</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14329 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q16. After successful memory allocation, new returns __________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;NULL</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;Zero</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;void</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;None of these</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14331 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q17. If we add an object and an integer by overloading a ‘+’ operator through a friend function, then the call will be ___________________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;integer + object</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;object + integer</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;both A and B</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;A or B</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14332 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q18. class extra
<br>	{
<br>		int a,b;
<br>		public:
<br>			extra(int x,int y)
<br>			{
<br>				a = x;
<br>				b = y;
<br>			}
<br>			extra operator += (int n);
<br>			void display()
<br>			{
<br>				cout &lt;&lt; endl &lt;&lt; a &lt;&lt; “ “ &lt;&lt; b;
<br>			}
<br>	};
<br>	extra extra::operator += (int n)
<br>	{
<br>		a = a + n;
<br>		b = b + n;
<br>		return *this;
<br>	}
<br>	void main()
<br>	{
<br>		extra e1(3,5);
<br>	e1 += 20;
<br>	e1.display();
<br>	}
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;3 5</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;23 25</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;20 20</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;+= operator cannot be overloaded.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14347 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q19. What is true about virtual functions?</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;Can be called from constructors but not from destructors.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;Can be called from destructors but not from constructors.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;Cannot be called from either constructors or from destructors.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Can be called from both constructors and destructors.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14383 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q20. What will be the output if the input provided is 5?
<br>	#include &lt; iostream.h &gt;
<br>	#include &lt; conio.h &gt;
<br>	int a = 1000;
<br>	class Test
<br>	{
<br>		int a;
<br>		public:
<br>			Test()
<br>			{
<br>				a = 0;
<br>			}
<br>			void get_a()
<br>			{
<br>				int a;
<br>				cout &lt;&lt; “Enter Value of A :”;
<br>                                cin &gt;&gt; a;
<br>			}
<br>			void put_a()
<br>			{
<br>				cout &lt;&lt; endl &lt;&lt; a &lt;&lt; “\t” &lt;&lt; ::a;
<br>			}
<br>	};
<br>        void main()
<br>        {
<br>              Test t1;
<br>              t1.get_a();
<br>              t1.put_a();
<br>        }
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;0 0</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;0 1000</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;5 1000</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Compile time error</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14387 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q21. Modularity is the benefit of __________________ characteristic of OOPs</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;Polymorphism</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;Encapsulation</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;Inheritance</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;All of the above.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14390 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q22. Data modeling means ________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;to identify all objects you want to manipulate and how they relate to each 
<br>other.
<br></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;to identify all procedures you want to manipulate and how they call each other.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;to identify all variables and functions you want to manipulate and how they relate 
<br>to each other.
<br></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;all of the above.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 1</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14394 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q23. Static members of a class</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;means class variable.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;have the same properties as that of global variables but having class scope.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;A and B</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;A or B</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14396 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q24. What will be the ouput?
<br>	#include &lt; iostream.h &gt;
<br>	#include &lt; string.h &gt;
<br>
<br>	void main()
<br>	{
<br>		char *str;
<br>		*str = ‘P’;
<br>		cout &lt;&lt; *str;
<br>		strcpy(str, “Sunbeam”);
<br>		cout &lt;&lt; *str;
<br>	}
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;P, Sunbeam</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;P, S</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;Compile time error.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Run time error.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14409 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q25. Which of the following statements are false regarding constructors of a class?
<br>1.	Constructors have ‘void’ returning data type.
<br>2.	Constructors can be declared as public, private or protected.
<br>3.	Constructors can be called explicitly.
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;1 and 2</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;2 only.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;1, 2 and 3</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;None.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14411 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q26. What is true regarding constructors and destructors?
<br>1.	They can’t be inherited.
<br>2.	A derived class can call the constructors and destructors of the base class.
<br>3.	Constructors, like most C++ functions, can have default arguments or use member initialization list.
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;Only 1.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;1 and 2.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;1, 2 and 3.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;1 and 3.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14412 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q27. Which of the below statement is true?
<br>1.	Destructors can have parameters.
<br>2.	Constructors can only be defined in public.
<br>3.	Providing constructors and destructors for a class is compulsory.
<br>4.	A class can have multiple constructors.
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;4 only.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;1 and 3.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;1 and 2.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;2 and 4.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 1</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14424 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q28. The global object’s constructor function is executed</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;as soon as object is created but after execution of main()</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;before main() is executed.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;in main() i.e. when main() is executing.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;in the reverse order of declaration.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14453 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q29. A state of an object may contain ____.</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;primitive data type only.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;object of another class.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;A or B.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;A and B.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14456 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q30. What will be the output?
<br>#include &lt; iostream.h &gt;
<br>#include &lt; conio.h &gt;
<br>class test
<br>{
<br>	int a;
<br>        public:
<br>	       test(){ a = 10; }
<br>               test(int p){ a = p; }
<br>               test(char x){   if ( x = = ‘i’ || x = = ‘I’ )
<br>                                        test(59);
<br>                               else
<br>                                	test();
<br>                           }
<br>               void display(){ 	cout &lt;&lt; endl &lt;&lt; a; }
<br>};
<br>void main()
<br>{
<br>clrscr();
<br>test t1,t2(100),t3(‘i’);
<br>t1.display();
<br>t2.display();
<br>t3.display();
<br>}
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;10 100 59</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;10 100 10</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;10 100 garbage</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Compile time error.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14459 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q31. What will be the output of the following programme?
<br>#include &lt; iostream.h &gt;
<br>#include &lt; conio.h &gt;
<br>class test
<br>{
<br>        int a;
<br>        public:
<br>	~test() { ; }
<br>	test(){	a = 10;	}
<br>	test(int p){ a = p; }
<br>	virtual void display() { cout &lt;&lt; endl &lt;&lt; a; }
<br>};
<br>class subtest:public test
<br>{
<br>	int b;
<br>	public:
<br>		subtest() {	b = 20; 	}
<br>		subtest(int p,int q):test(p) {	b = q;	}
<br>		void display() { cout &lt;&lt; endl &lt;&lt; a &lt;&lt; “ ”  &lt;&lt; b; }
<br>};
<br>
<br>void main()
<br>{
<br>	test *t;
<br>	t = new test(100);
<br>	t-&gt;display()’
<br>	t = new subtest(20,40);
<br>	t-&gt;display();
<br>	getch();
<br>}
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;100 20 40</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;100 20</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;20 40</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Compile time error</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 1</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14460 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q32. What will be the output?
<br>#include &lt; iostream.h &gt;
<br>#include &lt; conio.h &gt;
<br>#include &lt; stdio.h &gt;
<br>
<br>class test
<br>{
<br>	protected:
<br>	int a;
<br>	public:
<br>		test()	{ a = 10; }
<br>		virtual void display()	{cout &lt;&lt; endl &lt;&lt; a;}
<br>};
<br>
<br>class subtest:private test
<br>{
<br>	int b;
<br>	public:
<br>		subtest() {	b = 20; 	}
<br>		void display() { cout &lt;&lt; endl &lt;&lt; a &lt;&lt; " " &lt;&lt; b;	}
<br>};
<br>
<br>
<br>void main()
<br>{
<br>	clrscr();
<br>	test *t;
<br>	t = new test;
<br>	t-&gt;display();
<br>	t = new subtest;
<br>	t-&gt;display();
<br>	getch();
<br>}
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;10 10</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;20 20</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;10 20</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Compile time error</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14463 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q33. What will be the output?
<br>class data
<br>{
<br>	public:
<br>		int val;
<br>		data()
<br>		{
<br>			cout &lt;&lt; endl &lt;&lt; a;
<br>                        val = a;
<br>		}
<br>		~data ()
<br>		{
<br>			cout &lt;&lt; endl &lt;&lt; a;
<br>		}
<br>}ob1(1),ob2(2);
<br>void main()
<br>{
<br>	data ob3(3), ob4(4);
<br>}
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;4 3 2 1 4 3 2 1</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;3 4 1 2 2 1 4 3</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;1 2 3 4 4 3 2 1</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;4 3 2 1 1 2 3 4</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14466 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q34. For performing late binding the compiler creates _________.</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;a late binding function</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;a v-table.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;an array of late functions.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;smart pointer.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14471 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q35. When a derived class fails to override a virtual function then __</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;the first redefinition found in reverse order of derivation is used.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;if the of the derived class accesses that function, the function defined by the base class 
<br>is used.
<br></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;both A and B are true.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;both A and B are false.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14569 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q36. Stream cerr is used for handling ___________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;buffered error messages.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;unbuffered error messages.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;all kinds of error messages.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;None of the above.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14575 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q37. Which of the following statements are true regarding files and modes?</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;The ios::ate allows us to write data anywhere in the file.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;We can add data to an existing file by opening it in the append mode.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;ios::out opens file for reading as well as writing to the file.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;All of the above.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14581 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q38. Static member functions _________</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;can be used without an instantiation of an object.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;Can only access static data.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;A and B.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Neither A nor B.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14586 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q39. Which of the following statements have errors?</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;cout.width(10).precision(3);</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;cout &lt;&lt; resetiosflags(ios::left,ios::showpoint);</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;cout &lt;&lt; put(“siit”);</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;All of the above statements have errors.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14598 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q40.         What will be the output of the following programme?
<br>	void main()
<br>	{
<br>		cout &lt;&lt; setfill(‘/’);
<br>		cout.width(5);
<br>		cout &lt;&lt; “abcd”;
<br>	        cout.width(5) &lt;&lt; 980;
<br>        }
<br></font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;/abcd  980</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;/abcd//980</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;/abcd</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;abcd/980//</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;14625 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q41. Copy constructor and assignment operator does the same job.</font></td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : F</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15503 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q42. C++ is developed by </font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;Dennis Ritchie</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;Bjarne Stroustrup</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;Herbert Schitz</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;Bjarne Borg</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15507 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q43. C++ declaration int func(); with respect to arguments means.</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;arguments number is unspecified.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;exactly zero arguments.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;no need for arguments.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;can take int type arguments.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15509 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q44. The integer value returned by int main() is return value ---</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;to the system</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;to C++</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;to # include&lt;&gt;</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;none of the above</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 1</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15515 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q45. The pointer that points to current object is ‘this’</font></td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : T</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15525 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q46. The associative container stores</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;alphabetic or numerically stored values.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;keys in sorted order.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;iterators in sorted order.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;none of the above.</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15929 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q47. The private data of a class accessed by a friend function </font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;is in the object that invoked the friend</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;is in the object created by the friend function</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;is in the object of different class</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;is in the object sent to the friend function as argument</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 4</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15932 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q48. Can we declare pointer to a pointer in C++</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;yes</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;no</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;not in case of float</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;depends on the compiler</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 1</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15933 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q49. Which of the following in your opinion is a valid declaration?</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;const int extern a;</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;const extern int a;</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;both of the above</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;none of the above</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 3</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr><tr bgcolor="Pink">
		<td>QuestionID&nbsp;&nbsp;:&nbsp;&nbsp;15936 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject Name&nbsp;&nbsp;OOP_CET</td>
	</tr><tr>
		<td><font color="Blue">Q50. The use of delete is to</font></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.&nbsp;&nbsp;Only deallocate the memory allocated by new</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.&nbsp;&nbsp;Deallocate the memory allocated by new and call the class destructor</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.&nbsp;&nbsp;Call the destructor of that class whose object is to be destroyed.</td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4.&nbsp;&nbsp;None of the above</td>
	</tr><tr>
		<td><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Correct Answer : 2</b></td>
	</tr><tr>
		<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your Answer : </td>
	</tr>
</tbody></table><input id="btnClose" style="FONT-WEIGHT: bold; Z-INDEX: 103; LEFT: 2px; WIDTH: 130px; POSITION: absolute; TOP: 77px; HEIGHT: 33px" onclick="window.close()" type="button" value="Close this Window" name="btnClose">
			<span id="lblResult" style="Z-INDEX: 102; LEFT: 157px; POSITION: absolute; TOP: 80px"><b><font size="5">Hi dac10, You have scored : 0</font></b></span>
<div style="LEFT: 1px; WIDTH: 780px; POSITION: absolute; TOP: 0px; HEIGHT: 80px" ms_positioning="GridLayout">
	<img id="Header11_Image1" src="./2_files/Main.jpg" align="Middle" border="0" height="64" width="718" style="Z-INDEX: 101; LEFT: 15px; POSITION: absolute; TOP: 3px"></div>

</form>
	

</body></html>